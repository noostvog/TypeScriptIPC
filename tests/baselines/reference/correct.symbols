=== tests/cases/compiler/correct.ts ===
interface PrivateMessage {
>PrivateMessage : Symbol(PrivateMessage, Decl(correct.ts, 0, 0))

  text?: string;
>text : Symbol(PrivateMessage.text, Decl(correct.ts, 0, 26))

  userid?: number;
>userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))

  screenname?: string;
>screenname : Symbol(PrivateMessage.screenname, Decl(correct.ts, 2, 18))

} constrains {
  present(text);
  or(and(present(userid), not(present(screenname))),
     and(not(present(userid)), present(screenname)));
}

let msg1: PrivateMessage = {text: "Hello", userid: 42};
>msg1 : Symbol(msg1, Decl(correct.ts, 10, 3))
>PrivateMessage : Symbol(PrivateMessage, Decl(correct.ts, 0, 0))
>text : Symbol(text, Decl(correct.ts, 10, 28))
>userid : Symbol(userid, Decl(correct.ts, 10, 42))

function getUser(msg: PrivateMessage): number | string {
>getUser : Symbol(getUser, Decl(correct.ts, 10, 55))
>msg : Symbol(msg, Decl(correct.ts, 12, 17))
>PrivateMessage : Symbol(PrivateMessage, Decl(correct.ts, 0, 0))

  if (msg.userid) {
>msg.userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))
>msg : Symbol(msg, Decl(correct.ts, 12, 17))
>userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))

    return msg.userid;
>msg.userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))
>msg : Symbol(msg, Decl(correct.ts, 12, 17))
>userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))

  } else {
    return msg.screenname;
>msg.screenname : Symbol(PrivateMessage.screenname, Decl(correct.ts, 2, 18))
>msg : Symbol(msg, Decl(correct.ts, 12, 17))
>screenname : Symbol(PrivateMessage.screenname, Decl(correct.ts, 2, 18))
  }
}

getUser(msg1); 
>getUser : Symbol(getUser, Decl(correct.ts, 10, 55))
>msg1 : Symbol(msg1, Decl(correct.ts, 10, 3))

getUser({text: "Hello", screenname: "Alice"});
>getUser : Symbol(getUser, Decl(correct.ts, 10, 55))
>text : Symbol(text, Decl(correct.ts, 21, 9))
>screenname : Symbol(screenname, Decl(correct.ts, 21, 23))

function changeIdToName(msg: PrivateMessage, name: string): PrivateMessage {
>changeIdToName : Symbol(changeIdToName, Decl(correct.ts, 21, 46))
>msg : Symbol(msg, Decl(correct.ts, 23, 24))
>PrivateMessage : Symbol(PrivateMessage, Decl(correct.ts, 0, 0))
>name : Symbol(name, Decl(correct.ts, 23, 44))
>PrivateMessage : Symbol(PrivateMessage, Decl(correct.ts, 0, 0))

  if (msg.userid) {
>msg.userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))
>msg : Symbol(msg, Decl(correct.ts, 23, 24))
>userid : Symbol(PrivateMessage.userid, Decl(correct.ts, 1, 16))

    let msg2: PrivateMessage = msg;
>msg2 : Symbol(msg2, Decl(correct.ts, 25, 7))
>PrivateMessage : Symbol(PrivateMessage, Decl(correct.ts, 0, 0))
>msg : Symbol(msg, Decl(correct.ts, 23, 24))

    return objupdate(msg2, {userid: undefined, screenname: name});
>userid : Symbol(userid, Decl(correct.ts, 26, 28))
>undefined : Symbol(undefined)
>screenname : Symbol(screenname, Decl(correct.ts, 26, 46))
>name : Symbol(name, Decl(correct.ts, 23, 44))
  }
  return msg;
>msg : Symbol(msg, Decl(correct.ts, 23, 24))
}

changeIdToName(msg1, "Alice");
>changeIdToName : Symbol(changeIdToName, Decl(correct.ts, 21, 46))
>msg1 : Symbol(msg1, Decl(correct.ts, 10, 3))

