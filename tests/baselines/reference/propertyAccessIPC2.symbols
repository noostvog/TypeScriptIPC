=== tests/cases/compiler/propertyAccessIPC2.ts ===
interface PrivateMessage {
>PrivateMessage : Symbol(PrivateMessage, Decl(propertyAccessIPC2.ts, 0, 0))

    text?: any;
>text : Symbol(PrivateMessage.text, Decl(propertyAccessIPC2.ts, 0, 26))

    user_id?: any;
>user_id : Symbol(PrivateMessage.user_id, Decl(propertyAccessIPC2.ts, 1, 15))

    screen_name?: any;
>screen_name : Symbol(PrivateMessage.screen_name, Decl(propertyAccessIPC2.ts, 2, 18))

} with {
    type(user_id) == number;
    type(text) == string;
    type(screen_name) == string;
    present(text);
    or(and(present(user_id), not(present(screen_name))),
        and(not(present(user_id)), present(screen_name)));
}

let msg: PrivateMessage = {text: "Hello", user_id: 123};
>msg : Symbol(msg, Decl(propertyAccessIPC2.ts, 13, 3))
>PrivateMessage : Symbol(PrivateMessage, Decl(propertyAccessIPC2.ts, 0, 0))
>text : Symbol(text, Decl(propertyAccessIPC2.ts, 13, 27))
>user_id : Symbol(user_id, Decl(propertyAccessIPC2.ts, 13, 41))

msg.text; //OK
>msg.text : Symbol(PrivateMessage.text, Decl(propertyAccessIPC2.ts, 0, 26))
>msg : Symbol(msg, Decl(propertyAccessIPC2.ts, 13, 3))
>text : Symbol(PrivateMessage.text, Decl(propertyAccessIPC2.ts, 0, 26))


