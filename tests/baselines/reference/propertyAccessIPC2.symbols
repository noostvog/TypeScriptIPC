=== tests/cases/compiler/propertyAccessIPC2.ts ===
interface PrivateMessage {
>PrivateMessage : Symbol(PrivateMessage, Decl(propertyAccessIPC2.ts, 0, 0))

    text?: string;
>text : Symbol(PrivateMessage.text, Decl(propertyAccessIPC2.ts, 0, 26))

    userid?: number;
>userid : Symbol(PrivateMessage.userid, Decl(propertyAccessIPC2.ts, 1, 18))

    screenname?: string;
>screenname : Symbol(PrivateMessage.screenname, Decl(propertyAccessIPC2.ts, 2, 20))

} constrains {
    present(text);
    or(and(present(userid), not(present(screenname))),
        and(not(present(userid)), present(screenname)));
}


let msg: PrivateMessage = {text: "Hello", userid: 123};
>msg : Symbol(msg, Decl(propertyAccessIPC2.ts, 11, 3))
>PrivateMessage : Symbol(PrivateMessage, Decl(propertyAccessIPC2.ts, 0, 0))
>text : Symbol(text, Decl(propertyAccessIPC2.ts, 11, 27))
>userid : Symbol(userid, Decl(propertyAccessIPC2.ts, 11, 41))

msg.text; //OK
>msg.text : Symbol(PrivateMessage.text, Decl(propertyAccessIPC2.ts, 0, 26))
>msg : Symbol(msg, Decl(propertyAccessIPC2.ts, 11, 3))
>text : Symbol(PrivateMessage.text, Decl(propertyAccessIPC2.ts, 0, 26))


