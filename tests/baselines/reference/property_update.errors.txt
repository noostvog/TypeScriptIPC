tests/cases/compiler/property_update.ts(14,3): error TS2322: Type 'undefined' is not assignable to type 'string'.
tests/cases/compiler/property_update.ts(15,3): error TS95009: Cannot access userid from the object because its interface does not contain the predicate present(userid). Use a non-undefined type guard.


==== tests/cases/compiler/property_update.ts (2 errors) ====
    
    interface PrivateMessage {
      text?: string;
      userid?: number;
      screenname?: string;
    } constrains {
      present(text);
      or(and(present(userid), not(present(screenname))),
         and(not(present(userid)), present(screenname)));
    }
    
    function setMsg(msg: PrivateMessage, text: string, userid: number) {
      msg.text = text;      //OK
      msg.text = undefined; //ERROR
      ~~~~~~~~
!!! error TS2322: Type 'undefined' is not assignable to type 'string'.
      msg.userid = userid;  //ERROR
      ~~~~~~~~~~
!!! error TS95009: Cannot access userid from the object because its interface does not contain the predicate present(userid). Use a non-undefined type guard.
    
      if (msg.userid) {
        msg.userid = userid;        //OK
        msg.screenname = undefined; //OK
      }
    }
    let msg: PrivateMessage = {text: "Hello", userid: 42};
    let msg1: PrivateMessage = objupdate(msg, {userid: undefined, screenname: "Alice"});
    
    function changeIdToName(msg: PrivateMessage): PrivateMessage {
      if (msg.ruserid) {
        objupdate(msg, {userid: undefined, screenname: "Alice"}); //ERROR
        //The object msg contains an extra constraint inside this if statement
        //For the update to succeed, the first argument must be of the original type
        //So it is first casted back
        let msg2: PrivateMessage = msg
        return objupdate(msg2, {userid: undefined, screenname: "Alice"});
      }
      return msg;
    }
    